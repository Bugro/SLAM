

#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <wiringPi.h>
#include <time.h>
#include <signal.h>
#include <sys/time.h>

// Use GPIO Pin 17, which is Pin 0 for wiringPi library

#define LEFT_PWM 1
#define RIGHT_PWM 24

#define LEFT_IT 0
#define LEFT_A 2
#define LEFT_B 3

#define RIGHT_IT 27
#define RIGHT_A 28
#define RIGHT_B 29


// the event counter
volatile int eventLeftCounter = 0;
volatile int eventRightCounter = 0;
volatile int tmp1 = 0;
volatile int tmp2 = 0;
bool tmp = false;

int tabval[100];

void timer_handler(int signum);
void myLeftCounterIT(void);
void myRightCounterIT(void);

// -------------------------------------------------------------------------
// myInterrupt:  called every time an event occurs

void timer_handler(int signum)
{
	tmp1 = eventLeftCounter;
	tmp2 = eventRightCounter;
	eventLeftCounter = 0;
	eventRightCounter = 0;
	tmp = true;

	//counterPosX = ((tmp1 + tmp2) / 2) * WHEEL_CONST;
	//counterPosY = ((tmp1 + tmp2) / 2) * WHEEL_CONST;
	//counterOrientation = (tmp1 - tmp2);
}

void myLeftCounterIT(void) {

	bool encoderA = digitalRead(LEFT_A);
	bool encoderB = digitalRead(LEFT_B);

	if (encoderA && !encoderB)
		eventLeftCounter++;
	if (!encoderA && encoderB)
		eventLeftCounter--;
}


void myRightCounterIT(void) {

	bool encoderA = digitalRead(RIGHT_A);
	bool encoderB = digitalRead(RIGHT_B);

	if (encoderA && !encoderB)
		eventRightCounter++;
	if (!encoderA && encoderB)
		eventRightCounter--;
}

void initGPIO()
{
	// Set up Wiring Pi

  if (wiringPiSetup () < 0) {
      fprintf (stderr, "Unable to setup wiringPi: %s\n", strerror (errno));
      return;
  }

	pinMode(LEFT_PWM, OUTPUT);
	pinMode(RIGHT_PWM, OUTPUT);

	digitalWrite(LEFT_PWM, LOW);
	digitalWrite(RIGHT_PWM, LOW);

	pinMode(LEFT_PWM, PWM_OUTPUT);
	pinMode(RIGHT_PWM, PWM_OUTPUT);

	pwmSetMode(PWM_MODE_MS);
	pwmSetClock(2);
	pwmSetRange(1024);

	pinMode(LEFT_IT, INPUT);
	pinMode(LEFT_A, INPUT);
	pinMode(LEFT_B, INPUT);

	pinMode(RIGHT_IT, INPUT);
	pinMode(RIGHT_A, INPUT);
	pinMode(RIGHT_B, INPUT);


}

void initTimer()
{
	// Interrupt timer

	struct sigaction sa;
	struct itimerval timer;

	// Install timer_handler as the signal handler for SIGVTALRM.
	memset(&sa, 0, sizeof (sa));
	sa.sa_handler = &timer_handler;
	sigaction(SIGVTALRM, &sa, NULL);

	// Configure the timer to expire after 250 msec...
	timer.it_value.tv_sec = 0;
	timer.it_value.tv_usec = 100000;
	// ... and every 250 msec after that.
	timer.it_interval.tv_sec = 0;
	timer.it_interval.tv_usec = 100000;
	// Start a virtual timer. It counts down whenever this process is
	//executing.
	setitimer(ITIMER_VIRTUAL, &timer, NULL);

	// set Pin 17/0 generate an interrupt on high-to-low transitions
	// and attach myLeftCounterIT() to the interrupt

    if ( wiringPiISR (LEFT_IT, INT_EDGE_RISING, &myLeftCounterIT) < 0 ) {
      fprintf (stderr, "Unable to setup ISR: %s\n", strerror (errno));
      return ;
    }

	// set Pin 5/21 generate an interrupt on high-to-low transitions
	// and attach myLeftCounterIT() to the interrupt
    if ( wiringPiISR (RIGHT_IT, INT_EDGE_RISING, &myRightCounterIT) < 0 ) {
      fprintf (stderr, "Unable to setup ISR: %s\n", strerror (errno));
      return ;
    }
}


/*
//Using delayMicroseconds lets the linux scheduler decide to jump to another process.  Using this function avoids letting the
//scheduler know we are pausing and provides much faster operation if you are needing to use lots of delays.
void DelayMicrosecondsNoSleep (int delay_us)
{
	long int start_time;
	long int time_difference;
	struct timespec gettime_now;

	clock_gettime(CLOCK_REALTIME, &gettime_now);
	start_time = gettime_now.tv_nsec;		//Get nS value
	while (1)
	{
		clock_gettime(CLOCK_REALTIME, &gettime_now);
		time_difference = gettime_now.tv_nsec - start_time;
		if (time_difference < 0)
			time_difference += 1000000000;				//(Rolls over every 1 second)
		if (time_difference > (delay_us * 1000))		//Delay for # nS
			break;
	}
}
*/


// -------------------------------------------------------------------------
// main
int main(void) {

    initGPIO();
    initTimer();

    pwmWrite (LEFT_PWM, 750) ;
    pwmWrite (RIGHT_PWM, 750) ;
    delay (1000);


    while(1)
    {
        if(tmp)
        {
            tmp = false;
            printf("%d\n", tmp1);
            printf("%d\n", tmp2);
        }
    }
}



